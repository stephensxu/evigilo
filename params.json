{"name":"Evigilo","tagline":"Minimalist API to store and track your database changes","body":"# Evigilo\r\n\r\n[![Build Status](https://travis-ci.org/gogobot/evigilo.svg)](https://travis-ci.org/gogobot/evigilo)\r\n\r\n![Evigilo Logo](http://aviioblog.s3.amazonaws.com/screenshot-kensodevVC75M0a.jpg-2014-12-22-np7n4.png)\r\n\r\nEvigilo is a minimalist API to store/track your database changes.\r\n\r\nEvigilo is specifically designed to be used as a microservice with **zero** dependencies on your current application.\r\n\r\n## Why?\r\n\r\n### Why not use papertrail or any other db-centric solution?\r\n\r\nWe already have a pretty extensive messaging infrastructure at Gogobot and we try to refactor all the non-user-centric-logic out to micro-services.\r\n\r\nIt also makes more sense that this code will be external, without cluttering the application with more code.\r\n\r\n### Plugins support (Planned)\r\n\r\nWe plan on adding plugin support (similar to what I did for [cashier](https://github.com/ahawkins/cashier)), this means, you will be able to add `evigilo-aws` and store the change data on `AWS::S3` as JSON files.\r\n\r\nOnce it’s on AWS as JSON you can use it with all other AWS services like lambda for example.\r\n\r\n \r\n## Installation and running\r\n\r\n### Running the API service\r\n\r\n* Clone the repository.\r\n* Run `bundle install`.\r\n* Run `bundle exec rake db:create` in order to create the development and test databases.\r\n* Run `rackup -p 4567` in order to run the web service.\r\n\r\n### Running tests\r\n\r\n* Running `bundle exec rake` will run the full test suite.\r\n\r\n## API\r\n\r\nBasic API Endpoints are:\r\n\r\n* `/store/:table_name/:id/:action` Stores a change log for that object, returns a version id that you can store wherever you want (or don’t)\r\n* `/versions/:table_name/:id` Get all version of a specific object. Returns a list of versions from the server, no change data.\r\n* `/versions/:version` Get changelog data for a specific version\r\n\r\n### Api Terms\r\n\r\nTo keep consistency, the terms (params) of the API are kept across all the endpoints\r\n\r\n* `table_name` Just as it’s name suggest, the table (or collection) name\r\n* `id` Again, pretty self explanatory, pass the id of that row/object, this can be either string/integer, your choice\r\n* `version` The version id you want to query\r\n* `action` DB action relevant, this is a string so you can store anything you want eg: (create, update, delete, upsert)\r\n\r\nThere are **no manipulations** on the data you pass in, if you send `Users` as the table name, it will be stored as is, same for ids and the data/snapshot JSON.\r\n\r\n### Store action\r\n\r\nThe `store` endpoint requires you to send a `data` field with a JSON format for the changelog of the object.\r\n\r\nThis is the standard:\r\n\r\n```javascript\r\n{\r\n  fieldname: [ was, now ]\r\n}\r\n```\r\n\r\nFor example:\r\n\r\n```javascript\r\n{\r\n    \"name\": [\r\n        \"Avi Tzurel\",\r\n        \"Avi\"\r\n    ],\r\n    \"perishable_token\": [\r\n        \"XXXXX\",\r\n        \"YYYY\"\r\n    ],\r\n    \"updated_at\": [\r\n        \"2014-12-21T19:07:25Z\",\r\n        \"2014-12-22T07:49:49Z\"\r\n    ]\r\n}\r\n```\r\n\r\n`snapshot\r\n\r\n\r\n### Store Change\r\n\r\n#### POST `/store/:table_name/:id/:action`\r\n\r\nSAMPLE POST:\r\n\r\n```shell\r\ncurl \\\r\n  -X POST \\\r\n  \"http://localhost:4567/store/users/1/create\"  \\\r\n  -F \"data={\\\"name\\\":[\\\"Avi Tzurel\\\",\\\"Avi\\\"],\\\"perishable_token\\\":[\\\"XXXXX\\\",\\\"YYYYY\\\"],\\\"updated_at\\\":[\\\"2014-12-21T19:07:25Z\\\",\\\"2014-12-22T07:49:49Z\\\"]}\"\r\n```\r\n\r\nSAMPLE RESPONSE:\r\n\r\n```javascript\r\n{\r\n    \"result\": true,\r\n    \"version\": \"3d4415f0-baff-4ba9-bc70-11a95493dfb2\"\r\n}\r\n```\r\n\r\n`result` field will be true of the version was indeed saved correctly to the database and false if it wasn’t\r\n\r\n#### GET `/versions/:table_name/:id`\r\n\r\nWill return all versions (or empty array)\r\n\r\nSAMPLE GET:\r\n\r\n```shell\r\ncurl -X GET 'http://localhost:4567/versions/users/1'\r\n```\r\n\r\nSAMPLE RESPONSE:\r\n\r\n```javascript\r\n{\r\n    \"result\": \"ok\",\r\n    \"versions\": [\r\n        \"d0568dc7-4b89-4542-ad16-7b1b9d252e2b\",\r\n        \"06bdfc59-e261-4c43-b25e-8df69a17423c\",\r\n        \"00e4759d-5099-4635-81e6-103f1ba43492\",\r\n        \"444e5058-f7ad-433f-9199-7a0492cc0be9\",\r\n        \"4e515bdc-735d-4ef4-a3c3-ec6947a2f479\",\r\n        \"7a1eeb73-5a12-48e3-9a82-90b16cd56a03\",\r\n        \"e052f9ce-dd79-4204-977f-ab1d63d14524\",\r\n        \"87fdcd17-602c-4f18-9dbf-f4565a3da4b4\",\r\n        \"ff35450b-572f-4b59-8cfe-b7235492fefa\",\r\n        \"8a2a0d15-698b-4b1c-b78c-4f6898b55a47\",\r\n        \"3c9323f3-4be9-4c6a-8e43-56ac89b83b56\",\r\n        \"3d4415f0-baff-4ba9-bc70-11a95493dfb2\"\r\n    ]\r\n}\r\n```\r\n\r\n#### GET `/versions/:version`\r\n\r\nSAMPLE REQUEST: \r\n\r\n```shell\r\ncurl -X GET 'http://localhost:4567/versions/8a2a0d15-698b-4b1c-b78c-4f6898b55a47'\r\n```\r\n\r\nSAMPLE RESPONSE: \r\n\r\n```javascript\r\n{\r\n    \"result\": \"ok\",\r\n    \"object_name\": \"users\",\r\n    \"object_id\": \"1\",\r\n    \"data\": {\r\n        \"name\": [\r\n            \"Avi\",\r\n            \"NewAvi\"\r\n        ]\r\n    },\r\n    \"snapshot\": null\r\n}\r\n```\r\n\r\n\r\n## Contributing\r\n\r\n1. Fork it!\r\n2. Create your feature branch: `git checkout -b feature/my-new-feature`\r\n3. Commit your changes: `git commit -am 'Add some feature'`\r\n4. Push to the branch: `git push origin feature/my-new-feature`\r\n5. Submit a pull request :D]\r\n\r\nPlease make sure you have tests that cover the core functionality of what you are adding.\r\n\r\nFeel free to open an issue first in order to discuss the bug/feature you are addressing.\r\n\r\n## Credits\r\n\r\nAvi Tzurel: [@KensoDev](http://twitter.com/KensoDev)\r\n\r\n## License\r\n\r\nRead more on the license file, but as usual, it’s MIT\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}